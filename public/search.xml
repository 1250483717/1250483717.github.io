<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ssh反向代理实现内网穿透</title>
      <link href="/2020/07/13/ssh%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2020/07/13/ssh%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<p>由于实验室服务器为内网IP，因疫情影响不在学校的话是无法访问的，只能用teamviewer来远程桌面连接，teamviewer的延迟大家都懂的。所以采用ssh的连接还是十分必须的，这里我们需要有一台公网的服务器作为我们访问实验室服务器的中继，同时实验室的服务器也不能断网，这里采用的是阿里云。</p><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p> 我们常说的代理一般指的就是正向代理。在正向代理的过程中，隐藏了真实的请求客户端，服务端不知道真实的客户端是谁，客户端请求的服务都被代理服务器代替来请求，某些科学上网工具扮演的就是典型的正向代理角色。用浏览器访问google等网站时，被残忍的block掉，于是你可以在国外搭建一台代理服务器，让代理帮我去请求google.com，代理把请求返回的相应结构再返回给我，这就是正向代理。 简单的讲就是通过一个中继来访问目标服务器，而不是直接进行访问，从而绕开GFW等。</p><p><img src="img%5CProxy1.jpg" alt=""></p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>有别于正向代理，反向代理的对象是服务端。比如你访问<a href="http://www.google.com，其背后的服务器可能成千上万，而你并不需要关心，只需要知道反向代理服务器的地址就可以，反向代理服务器可以将你的请求转发到真实的服务器上。比如我们常用的nginx服务器，就是性能十分优秀的反向代理服务器，用来做负载均衡（[nginx负载均衡配置](https://www.cnblogs.com/diantong/p/11208508.html)）。" target="_blank" rel="noopener">www.google.com，其背后的服务器可能成千上万，而你并不需要关心，只需要知道反向代理服务器的地址就可以，反向代理服务器可以将你的请求转发到真实的服务器上。比如我们常用的nginx服务器，就是性能十分优秀的反向代理服务器，用来做负载均衡（[nginx负载均衡配置](https://www.cnblogs.com/diantong/p/11208508.html)）。</a></p><p><img src="img%5CProxy2.jpg" alt=""></p><h3 id="如何实现反向代理"><a href="#如何实现反向代理" class="headerlink" title="如何实现反向代理"></a>如何实现反向代理</h3><p>比如我们有两台服务器A和B，A为实验室无公网ip服务器，B为阿里云有公网ip服务器。此时，若想让在校外的电脑C通过ssh登录C，你需要做的是： <strong>在B上建立对A的ssh反向代理通道，然后用C登录B后再ssh进入A。</strong> </p><h4 id="1-建立反向代理"><a href="#1-建立反向代理" class="headerlink" title="1. 建立反向代理"></a>1. 建立反向代理</h4><p>首先在A上操作，使用如下语句向B发起反向代理请求（这里最好root执行），这里会要求输入B对应用户的密码，执行成功后，会在B的7280端口映射向A的ssh请求(端口22) </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -fCNR 3388:localhost:22 aliyun_user@aliyun_IP</span><br></pre></td></tr></table></figure><h4 id="2-检查是否执行成功"><a href="#2-检查是否执行成功" class="headerlink" title="2. 检查是否执行成功"></a>2. 检查是否执行成功</h4><p> 输入如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tnlp</span><br></pre></td></tr></table></figure><p>可以得到如下结果</p><p><img src="img%5CProxy.jpg" alt=""></p><h4 id="3-测试登录"><a href="#3-测试登录" class="headerlink" title="3. 测试登录"></a>3. 测试登录</h4><p>首先用C登录B，然后在B上输入如下命令，输入A上用户名对应密码即可成功登录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 3388 [A上的用户名]@localhost</span><br></pre></td></tr></table></figure><h4 id="4-设置autossh"><a href="#4-设置autossh" class="headerlink" title="4. 设置autossh"></a>4. 设置autossh</h4><p>为了确保连接的稳定性，采用autossh工具来实现ssh断开后的自动连接。首先需要再A上安装 autossh工具，然后执行以下语句即可 ，其中-M是指定另外一个端口7281用来监测ssh的连接情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">autossh -M 7281 -fCNR 3388:localhost:22 aliyun_user@aliyun_IP</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://blog.csdn.net/ppp8300885/article/details/81062052" target="_blank" rel="noopener">https://blog.csdn.net/ppp8300885/article/details/81062052</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh反向代理 </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell 脚本学习</title>
      <link href="/2020/07/02/Shell-%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/07/02/Shell-%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>最近</p>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS Mongodb安装配置与数据导入</title>
      <link href="/2020/06/30/CentOS-Mongodb%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5/"/>
      <url>/2020/06/30/CentOS-Mongodb%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。</p><p>在高负载的情况下，添加更多的节点，可以保证服务器性能。</p><p>MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p><p>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>面向文档存储，操作简单</li><li>支持任何属性的索引，从而实现快速排序</li><li>高扩展性</li><li>支持多种编程语言</li><li>安装简单</li><li>…</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>CentOS下安装，官网 <a href="https://www.mongodb.com/download-center" target="_blank" rel="noopener">https://www.mongodb.com/download-center</a> 复制对应版本下载链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载</span></span><br><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.0.tgz</span><br><span class="line"><span class="meta">#</span><span class="bash">解压</span></span><br><span class="line">tar -xvzf mongodb-linux-x86_64-4.0.0.tgz</span><br><span class="line"><span class="meta">#</span><span class="bash">重命名(根据自身需要)</span></span><br><span class="line">mv mongodb-linux-x86_64-4.0.0.tgz mongodb</span><br></pre></td></tr></table></figure><p>创建数据和日志文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd mongodb</span><br><span class="line">mkdir db</span><br><span class="line">mkdir logs</span><br></pre></td></tr></table></figure><p>创建配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd bin/</span><br><span class="line">vi mongodb.conf</span><br></pre></td></tr></table></figure><p>配置文件填写如下，主要配置数据和日志文件的路径信息和端口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dbpath=/home/mongodb/db</span><br><span class="line">logpath=/home/mongodb/logs/mongodb.log</span><br><span class="line">port=27017</span><br><span class="line">fork=true</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mongod -f mongodb.conf</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建数据库</span></span><br><span class="line">use [db name];</span><br><span class="line"><span class="meta">#</span><span class="bash">查看所有数据库</span></span><br><span class="line">show dbs;</span><br><span class="line"><span class="meta">#</span><span class="bash">创建集合</span></span><br><span class="line">db.createCollection("[collection name]");</span><br><span class="line"><span class="meta">#</span><span class="bash">查看所有集合</span></span><br><span class="line">show collections;</span><br><span class="line"><span class="meta">#</span><span class="bash">导入数据到集合</span></span><br><span class="line">mongoimport --db [db name] --collection [collection name] --file [file path]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装Nginx服务器</title>
      <link href="/2020/06/30/CentOS%E5%AE%89%E8%A3%85Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2020/06/30/CentOS%E5%AE%89%E8%A3%85Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p> NGINX是一个高效的HTTP和反向代理的服务器，具体信息可查看官网：<a href="https://nginx.org/en/" target="_blank" rel="noopener">https://nginx.org/en/</a> </p><h3 id="1-源码安装"><a href="#1-源码安装" class="headerlink" title="1.源码安装"></a>1.源码安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.16.1.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash">解压</span></span><br><span class="line">tar -xzf nginx-1.16.1.tar.gz</span><br><span class="line">cd nginx-1.16.1</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编译</span></span><br><span class="line">make</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">make install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者选择</span></span><br><span class="line">make &amp; make install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检测是否安装成功</span></span><br><span class="line">nginx -v</span><br></pre></td></tr></table></figure><h3 id="2-启动Nginx"><a href="#2-启动Nginx" class="headerlink" title="2.启动Nginx"></a>2.启动Nginx</h3><p>启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">重启</span></span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><p>查看是否启动成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure><p>访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#端口为配置文件中的端口号</span><br><span class="line">curl localhost:80</span><br></pre></td></tr></table></figure><p>启动成功的截图如下：</p><p><img src="img/nginx.jpg" alt="启动成功截图"></p><h3 id="配置服务"><a href="#配置服务" class="headerlink" title="配置服务"></a>配置服务</h3><p>此处配置的为Vue项目，首先在Vue项目中运行npm run build命令生成dist文件夹，然后修改nginx配置文件（配置文件在/usr/local/nginx/conf/nginx.conf）如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8888;#默认端口是80，如果端口没被占用可以不用修改</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        root        /home/my_project/dist;#vue项目的打包后的dist</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            try_files $uri $uri/ @router;#需要指向下面的@router否则会出现vue的路由在nginx中刷新出现404</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        #对应上面的@router，主要原因是路由的路径资源并不是一个真实的路径，所以无法找到具体的文件</span><br><span class="line">        #因此需要rewrite到index.html中，然后交给路由在处理请求资源</span><br><span class="line">        location @router &#123;</span><br><span class="line">            rewrite ^.*$ /index.html last;</span><br><span class="line">        &#125;</span><br><span class="line">        #.......其他部分省略</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">重启</span></span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用BERT进行文本分类？</title>
      <link href="/2020/04/18/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8BERT%E8%BF%9B%E8%A1%8C%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB%EF%BC%9F/"/>
      <url>/2020/04/18/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8BERT%E8%BF%9B%E8%A1%8C%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="1-什么是BERT？"><a href="#1-什么是BERT？" class="headerlink" title="1. 什么是BERT？"></a>1. 什么是BERT？</h3><p> BERT的全称是Bidirectional Encoder Representation from Transformers，即双向Transformer的Encoder，因为decoder是不能获要预测的信息的。模型的主要创新点都在pre-train方法上，即用了Masked LM和Next Sentence Prediction两种方法分别捕捉词语和句子级别的representation。</p><h3 id="2-BERT结构"><a href="#2-BERT结构" class="headerlink" title="2. BERT结构"></a>2. BERT结构</h3>]]></content>
      
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 文本分类 </tag>
            
            <tag> BERT </tag>
            
            <tag> 自然语言处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch图神经网络库PyG</title>
      <link href="/2019/11/26/PyTorch%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%BA%93PyG/"/>
      <url>/2019/11/26/PyTorch%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%BA%93PyG/</url>
      
        <content type="html"><![CDATA[<p>​    Pytorch Geometric (PyG) 是由德国研究者提出的基于pytorch的几何深度学习库，具有快速、易用的优势，使得图神经网络的搭建变得非常容易。Github地址：<a href="https://github.com/rusty1s/pytorch_geometric" target="_blank" rel="noopener">https://github.com/rusty1s/pytorch_geometric</a>，论文地址：<a href="https://arxiv.org/pdf/1903.02428.pdf" target="_blank" rel="noopener"> https://arxiv.org/pdf/1903.02428.pdf </a></p><p>​    图神经网络 (GNN) 是近年发展起来的一个很有前景的深度学习方向，也是一种强大的图、点云和流形表示学习方法。实现 GNN 具有挑战性，因为需要在高度稀疏且不规则、不同大小的数据上实现高 GPU 吞吐量，故而有了PyG的诞生。PyG利用专用的 CUDA 内核实现了高性能。它遵循一个简单的消息传递 API，将最近提出的大多数卷积和池化层捆绑到一个统一的框架中。所有实现的方法都支持 CPU 和 GPU 计算，并遵循一个不可变的数据流范式，该范式支持图结构随时间的动态变化，甚至比几个月前 NYU、AWS 联合开发的图神经网络库 DGL(Deep Graph Library) 快了 15 倍！</p><p>​    PyTorch Geometry 是一个基于 PyTorch 的几何深度学习扩展库，用于不规则结构输入数据，例如图(graphs)、点云 (point clouds) 和流形 (manifolds)。PyTorch Geometry 包含了各种针对图形和其他不规则结构的深度学习方法，也称为几何深度学习，来自于许多已发表的论文。</p><p>​    此外，它还包含一个易于使用的 mini-batch 加载器、多 GPU 支持、大量通用基准数据集和有用的转换，既可以学习任意图形，也可以学习 3D 网格或点云。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torch-geometric</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> 图神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图注意力机制</title>
      <link href="/2019/11/19/%E5%9B%BE%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/11/19/%E5%9B%BE%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git学习</title>
      <link href="/2019/11/19/git%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/11/19/git%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/git.jpg" alt="git-tutorial"></p><h3 id="Git是什么？"><a href="#Git是什么？" class="headerlink" title="Git是什么？"></a>Git是什么？</h3><p>Git是一个版本控制系统，由linux之父采用C语言开发。</p><h3 id="集中式vs分布式"><a href="#集中式vs分布式" class="headerlink" title="集中式vs分布式"></a>集中式vs分布式</h3><p>CVS和SVN是集中式的版本控制系统，Git则是分布式的版本控制系统。</p><h5 id="集中式"><a href="#集中式" class="headerlink" title="集中式"></a>集中式</h5><p><img src="/images/git_01.jfif" alt="git-tutorial"></p><p>版本库存储于中央服务器上，使用必须联网。</p><a id="more"></a><h5 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h5><p><img src="/images/git_02.jfif" alt="git-tutorial"></p><p>每个电脑中都存在完整的版本库。</p><h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><p>linux</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>windows</p><p>在<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">官网</a>下载安装即可，然后进行以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>激活函数</title>
      <link href="/2019/11/18/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/"/>
      <url>/2019/11/18/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="1-sigmoid函数"><a href="#1-sigmoid函数" class="headerlink" title="1. sigmoid函数"></a>1. sigmoid函数</h3><p>​    sigmoid函数表达式如下：<br>$$<br>\sigma(z)=\frac{1}{1+e^{-z}}<br>$$<br>​    图像如下：</p><p><img src="/images/sigmoid.jpg" alt=""></p><p>​    由图像可知，输出范围为(0, 1)，二分类常用函数，逻辑回归也多采用，在二分类中，输出事件概率，满足某一概率则划分为正。</p><p>​    优点：1.值域在0和1之间</p><p>​                2.函数具有非常好的对称性</p><p>​    缺点： 输入超过一定范围会不敏感</p><a id="more"></a><h3 id="2-softmax函数"><a href="#2-softmax函数" class="headerlink" title="2. softmax函数"></a>2. softmax函数</h3><p>​    softmax函数在多分类任务中应用广泛，可以将输入映射为0-1之间的实数，且归一化和为1。最后输出的是每个分类被取到的概率。</p><p>​    假设有一数组V，V<sub>i</sub>表示其中第i个元素，则其softmax值为：<br>$$<br>S_i=\frac{e^i}{\Sigma_j{e^j}}<br>$$<br>​    Softmax相较于normalization能够更好的区分不同类别的计算结果</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 激活函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 命令</title>
      <link href="/2019/11/18/first/"/>
      <url>/2019/11/18/first/</url>
      
        <content type="html"><![CDATA[<p>​    Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题，以下是一些使用中经常用到的命令。在部署到github时，最好使用clean清理下缓存，否则某些效果可能无法正常显示。 </p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">hexo init</td><td align="center">初始化</td></tr><tr><td align="center">hexo clean</td><td align="center">清除缓存 ,会删掉根目录下的public文件夹</td></tr><tr><td align="center">hexo new “postName” | hexo n “postName”</td><td align="center">新建文章</td></tr><tr><td align="center">hexo new page “pageName”</td><td align="center">新建页面</td></tr><tr><td align="center">hexo generate | hexo g</td><td align="center">生成静态页面至public目录</td></tr><tr><td align="center">hexo server | hexo s</td><td align="center">开启预览访问</td></tr><tr><td align="center">hexo deploy | hexo d</td><td align="center">部署到github</td></tr><tr><td align="center">hexo help</td><td align="center">查看帮助</td></tr><tr><td align="center">hexo version</td><td align="center">查看版本</td></tr><tr><td align="center">hexo –safe</td><td align="center">安全模式（不会载入插件和脚本）</td></tr><tr><td align="center">hexo –debug</td><td align="center">调试模式（终端显示调试信息并记录到debug.log）</td></tr><tr><td align="center">hexo –silent</td><td align="center">简洁模式（隐藏终端信息）</td></tr><tr><td align="center">hexo –draft</td><td align="center">显示source/_drafts文件夹中的草稿</td></tr><tr><td align="center">hexo –cwd /path/to/cwd</td><td align="center">自定义当前工作目录的路径</td></tr></tbody></table><a id="more"></a><h3 id="HEXO-NEXT-GITHUB-PAGE博客搭建"><a href="#HEXO-NEXT-GITHUB-PAGE博客搭建" class="headerlink" title="HEXO + NEXT + GITHUB PAGE博客搭建"></a>HEXO + NEXT + GITHUB PAGE博客搭建</h3><ol><li><p>首先在github上新建一个仓库，名称为your_github_name.github.io（这里一定得是你的github名字）</p></li><li><p>安装node.js，在<a href="http://nodejs.cn/" target="_blank" rel="noopener">官网</a>中下载安装即可，安装后输入node -V查看是否安装成功。</p></li><li><p>安装hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>查看是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -V</span><br></pre></td></tr></table></figure></li><li><p>安装git，windows下到<a href="https://gitforwindows.org/" target="_blank" rel="noopener">官网</a>下载安装即可。</p></li><li><p>新建一个用来存放博客内容的文件夹blog。</p></li><li><p>进入该文件夹后进行初始化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>生成静态页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g | hexo generate</span><br></pre></td></tr></table></figure></li><li><p>打开服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s | hexo server</span><br></pre></td></tr></table></figure><p>最后在浏览器输入localhost:4000即可查看博客了，当然这个端口也可以自行指定。Ctrl+c即可关闭此服务。</p></li></ol><h3 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h3><ol><li><p>生成SSH Key添加到github，首先打开你的git bash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>然后进行key的生成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>在.ssh文件中找到生成的key复制到github中。</p></li><li><p>测试是否能够连接成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github,com</span><br></pre></td></tr></table></figure></li><li><p>配置hexo的git信息</p><p>首先打开blog文件夹，在其中_config.yml文件夹的最后修改为以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li><p>如果到这一步直接提交是会报错的，我们需要安装deploy-git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>最后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>建议每次提交前先clean下，否则可能导致某些内容无法正常显示，clean会删除public文件夹。</p></li></ol><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><ol><li><p>获取域名</p><p>我这里用的是<a href="https://www.freenom.com/zh/index.html?lang=zh" target="_blank" rel="noopener">freenom</a>的免费域名，注册即可申请一年的免费域名。</p></li><li><p>域名解析</p><p>如果用的是freenom的话，进入该网站，在域名（my domains）页面点击manage domian按钮进入域名管理页面，再点击Manage Freenom DNS来添加域名解析。</p><p><img src="/images/managedns.jpg" alt=""></p><p>需要添加如图上所示的两条记录，首先ping一下你的地址获得ip。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping yourname.github.io</span><br></pre></td></tr></table></figure><p>添加CNAME，采用bolg.xxx.xxx的二级域名。</p></li><li><p>github设置</p><p>进入对应仓库的setting页面，在Github Pages项下的Custom domain填入你的域名地址。</p></li><li><p>在blog文件下的source下添加CNAME文件夹，内容为blog.xxx.xxx，不需要后缀名。</p></li><li><p>重新进行hexo的部署操作，等待域名解析完成后即可访问。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
